입력 크기에 비례하는 비를 쓰기 때문에 이제 제자리성 정렬이 아닙니다. 
안정성은 얘는 안정된 정렬이에요. 순서대로 뒤쪽 레코드로부터 가장 뒤쪽에 배치를 하고 있죠 같은 수가 나왔을 때 바로 뒤에다가 왜냐하면 제일 있을 수 있는 최대의 인덱스를 우리가 보잖아요. 
그렇기 때문에 당연히 안정성을 보장을 받을 수가 있습니다. 
그래서 지금 봤듯이 이 분포를 기반으로 한 정렬들은
빠르기는 빠른데요. 이제 특정한 경우에만 어썸션이 있습니다. 
사용을 할 수 있는 가정이 있습니다. 
두 번째 기수 정렬을 해볼게요 전체 키를 여러 자리로 나누어서 각 자리마다 개수 정렬과 같은 안정적인 정렬 알고리즘을 안정적인 정렬 알고리즘 괴수 정렬 삽입 정렬 합병 정렬 등을 적용해서 정렬하는 방법이에요.
이 안정성이 왜 중요하냐고 저번에 질문한 학생이 있었는데 여기서도 한 가지가 있을 것 같아요. 
안정적인 정열을 여기는 정렬 안의 정열을 사용을 하거든요. 
그래서 안정적인 정렬을 근데 꼭 사용해야 되는 예입니다. 
얘가 그래서 그것도 한 가지 안정성이 왜 필요한지 그걸 왜 따지는지에 대답이 하나 될 수 있을 것 같아서
잠깐 이야기를 해주는데 일단 무슨 소리인지 지금 못 알아들을 텐데 일단 이거 설명을 하고 이야기를 할게요 낮에 자리부터 순차적으로 정렬을 한대요 어떻게 됐냐면 여러분한테 이런 애들이 들어왔어요. 
이런 애들이 들어왔을 때 낮은 자리부터 먼저 정리를 하는 거예요.
7 4 4 7 0 1 0 하면 하면 일단
여기 0이 제일 작죠 그러니까 830을 앞으로 뽑아요. 
그다음에는 뭐가 작아요. 1이 작죠. 
그러니까 911이 여기 제일 마지막 자릿수를 정렬하는 거예요. 
0 1 4 4
오
7 7 이렇게 되도록 마지막 자리 수를 가지고 정렬을 하는 거예요. 
그다음에 두 번째 자리를 가지고 하겠죠. 
3 1 5 2 5 6 5 하면 어떻게 돼야 돼요 1 2 3 5가 두 개 있네 색이 있구나 색이나 있어요. 
어떻게 여기 지금 갔지 누구를 앞에다 넣어야 돼
안정적인 정렬을 사용해서 정렬을 하는 거예요. 
그렇지 않으면 어떻게 되겠어요. 지금 제 뒤에 거 가지고 지금 정렬이 돼 있어요. 
사하고 5하고 그 다음에 7 4 5 7 순서가 되도록 지금 어떤 건지 감이 와요. 
5 숫자가 같기는 같지만 지금 얘가 앞에 있었으면 얘를 앞에 누는 거예요.
얘가 그다음에 있었으면 그다음에 넣고 얘가 그다음에 있었으면 그다음에 넣고 여기서 여기로 이제 여기서도 그렇고 처음에는 크게 상관없지만 두 번째도 그렇고 그다음에도 그렇고 얘를 이제 낮은 자리를 가지고 정렬을 하는데 정렬은 아무 정렬이나 써도 돼요. 
안정적인 거 써야 돼요 근데 왜
이렇게 5가 3개 나왔을 경우에 얘네끼리 순서로 바꿔버리면 안 되니까 여기 가면 조금 더 이해가 갈 거예요. 
그다음에는 이제 높은 자리 제일 높은 자리가 여기 전 3인데 얘를 가지고 정렬을 해보면 얘를 가지고 정렬을 좀 해보면 9 1 8 6 이렇게 되면 어떻게 돼요. 
5 4 5가 되잖아요. 얘가 제일 작으니까 얘부터 와야 되겠죠. 
1서부터 그런데 두 번째 사 사가 작으니까 사도 오는 것도 문제없어요.
그런데 오는 어떻게 돼요. 지금 두 개가 있어요. 
여기 얘도 있고 얘도 있어 그러면 얘를 앞에다 놓고 그다음에 얘를 넣으면 우리가 안정적인 정열을 사용하게 되면 이렇게 되죠. 
근데 우리가 안정적이지 않은 정열을 사용하면 잘못하면 얘네들이가 순서가 바뀌어버려요. 
567이 앞에 나오고 그다음에 555가 나와요 돼요 안돼요 그럼 정렬이 안 되죠
무슨 소리인지 알겠어요. 이럴 때 이제 안정적인 정열을 이용을 해서 각 단계를 정렬을 해나가는 게 필요합니다. 
이게 안정적인 정열을 우리가 왜 따지는지에 한 가지 답이 될 수 있을 것 같습니다. 
그래서 어떻게 하는 건지 알겠죠. 가장 낮은 자리에 맞춰서 정리를 해놓고 그다음에 두 번째 자리에 맞춰서 정 해놓고 그다음에 마지막에 제일 높은 자리 왜냐하면 우리 제일 높은 자리가 제일 중요하잖아요. 
그렇죠
그래서 그렇게 정렬을 하게 됩니다. 이게 기수 정렬이고요 얘는 제자리 정렬은 아니에요. 
진법의 크기만큼 메모리가 추가가 돼요. 
그래서 경우에 따라 데이터 크기만큼 메모리가 추가가 되기 때문에 제자리 정렬이 아니고요 얘는 안정적인 정렬이에요. 
순서대로 뒤쪽 레코드부터 장 뒤쪽에 배치를 하게 되기 때문에 이제 안정적인 정맥이 됩니다.
개수 정렬은 오엔이 걸려요. 이용시 체약 시간 복잡도는 5dn이 됩니다. 
d는 여기서 자리 개수를 이야기를 하고요 d를 이제 그냥 우리가 상수라고 생각을 하면 별로 많지 않다고 생각을 하면 자리 수가 그러면 그냥 on이라고 하면 됩니다. 
왜냐하면 우리 지금 ng씩 정렬을 시키잖아요.
그래서 네 근데 만약에 여러분들이 계수 정렬을 이용을 하지 않게 되고 각 단계에서 정렬을 더 시간이 오래 걸리는 걸 하면 거기에 맞춰서 커지겠죠. 
그래서 이거는 중간 단계 정렬을 어떤 거를 사용하느냐에서 틀리겠지만 개수 정렬을 사용하게 될 경우에는